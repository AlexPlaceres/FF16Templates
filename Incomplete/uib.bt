//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: Final Fantasy XVI UI Binary
//   Authors: Uhhhh, Nenkai
//   Version: 
//   Purpose: 
//  Category: UI
// File Mask: *.uib
//  ID Bytes: 0x55 0x49 0x42
//   History: 
//------------------------------------------------

const uint64 Sky_400<hidden=true> = 0xF8BD38;
const uint64 Sky_500<hidden=true> = 0xE9A50E;
const uint64 Sky_700<hidden=true> = 0xC78402;
const uint64 Sky_800<hidden=true> = 0x855907;
const uint64 Sky_900<hidden=true> = 0x6E4A0C;

const uint64 Teal_400<hidden=true> = 0xA6B814;
const uint64 Teal_500<hidden=true> = 0x88940D;
const uint64 Teal_700<hidden=true> = 0x6E760F;
const uint64 Teal_800<hidden=true> = 0x595E11;
const uint64 Teal_900<hidden=true> = 0x4A4E13;

const uint64 Green_400<hidden=true> = 0x5EC522;
const uint64 Green_500<hidden=true> = 0x5EC522;
const uint64 Green_700<hidden=true> = 0x518D2D;
const uint64 Green_800<hidden=true> = 0x346516;
const uint64 Green_900<hidden=true> = 0x42652C;

const uint64 Amber_400<hidden=true> = 0x24BFFB;
const uint64 Amber_500<hidden=true> = 0x0B9EF5;
const uint64 Amber_600<hidden=true> = 0x0677D9;
const uint64 Amber_700<hidden=true> = 0x0953B4;
const uint64 Amber_800<hidden=true> = 0x0E4092;
const uint64 Amber_900<hidden=true> = 0x0F3578;

const uint64 Red_400<hidden=true> = 0x7171F8;
const uint64 Red_500<hidden=true> = 0x4444EF;
const uint64 Red_600<hidden=true> = 0x2626DC;
const uint64 Red_700<hidden=true> = 0x1C1CB9;
const uint64 Red_800<hidden=true> = 0x1B1B99;
const uint64 Red_900<hidden=true> = 0x1D1D7F;

struct MemberList;
struct BezierNode;
struct AssetEntry;

typedef struct(uint numBytes){
    ubyte bytes[numBytes];
} Padding<bgcolor=cNone, read=Str("%d bytes of padding", sizeof(this.bytes))>;

typedef struct TColor{
    ubyte r;
    ubyte g;
    ubyte b;
    ubyte a;
    
    local uint full_color<format=hex> = a;
    full_color = full_color << 8;
    full_color |= b;
    full_color = full_color << 8;
    full_color |= g;
    full_color = full_color << 8;
    full_color |= r;
} Color<bgcolor=(this.full_color & 0xFFFFFF), read=Str("r%u, g%u, b%u, a%u", this.r, this.g, this.b, this.a)>;

typedef int OffsetT<fgcolor=cRed, format=hex>;

typedef struct TPoint{
    int x, y;
} Point <read=Str("%d, %d", this.x, this.y)>;

typedef struct TVector2{
    float x, y;
} Vector2 <read = Str("%f, %f", this.x, this.y)>;

typedef struct TDataPointer{
    OffsetT offset;
    int count<fgcolor=cGreen>;
} DataPointer<read=Str("Offset: %Xh, Count: %d", this.offset, this.count)>;

enum BlendMode{
    kNormal,
    kDarken,
    kMultiply,
    kColorBurn,
    kLinearBurn,
    kLighten,
    kScreen,
    kColorDodge,
    kLinearDodge,
    kOverlay,
    kSoftLight,
    kHardLight,
    kVividLight,
    kLinearLight,
    kHdrBlend,
    kHdrLowBlend,
    kHdrHighBlend,
};

enum LayerEffect{
    kColorFilter,
    kChromaticAberration,
    kBlur,
    kDropShadow,
    kGlow,
    kRadialBlur,
    kBackgroundBlur,
    kAlphaMask,
    kImageMask,
    kAntiAliasing,
};

enum MemberType{
    kGroup = 0x1,
    kImage = 0x2,
    kUnknown3 = 0x3,
    kUnknown4 = 0x4,
    kUnknown5 = 0x5,
    kRectangle = 0x6,
    kEllipse = 0x7,
    kBezier = 0x8,
    kGroupRef = 0xA,
    kEffect = 0xB,
    kUnknown12 = 0xC,
    kMask = 0xD
};

typedef struct TMemberStruct_0{
    int field_0x0; // Maybe timeline item index
    OffsetT str_offset;
    int value_2<format=hex>; // Maybe timeline item type + flags
    int starting_frame<bgcolor=cLtRed>;
    int duration<fgcolor=0x8affff>;
    int item_index<fgcolor=cGreen>; // Index of group member this item affects
    ubyte bool_0;
    ubyte bool_1;
    Padding padding(2);
    OffsetT data_offset<bgcolor=cDkRed>;
    
    FSeek(startof(this) + data_offset);
    
    struct 
    {
        int id_maybe;
        switch(id_maybe)
        {
            // 0x1391: Likely for keyframes
            // 0x13A3: For beziers

            case 0x13A3: { 
                int stuff[20]<bgcolor=cGray>;
                int offset;
                int count;
                
                FSeek(startof(this) + offset);
                BezierNode nodes[count];
                break;
            }
            case 0x13A4:{
                byte data[0x2C]<bgcolor=cGray>;
                int offset<fgcolor=cRed>;
                FSeek(startof(this) + offset);
                string string_data;
                break;
            }
            default: {
                Padding padding(44);
                int field_0x1;
                break;
            }
        }
    } member_data<bgcolor=cDkGreen>;
    
    
    FSeek(startof(this) + 0x20);
} MemberStruct_0<bgcolor=cRed, name = Str("%Xh: Item %d ", this.value_2, this.item_index)>;

typedef struct TMemberStruct_1(DataPointer& ptr){
    local int count <hidden=true> = ptr.count;
    OffsetT offsets[count]<bgcolor=Teal_400>;
    
    local int i <hidden=true>;
    for( i = 0 ; i < count ; i++ )
    {
        FSeek( startof(offsets) + offsets[i] );
        struct{
            int type;
            if(type == 0xFA2)
            {
                int values[9]<bgcolor=cGray>;
            }
            else
            {
                int values[9]<bgcolor=cGray>;
                OffsetT name_offset<bgcolor=cDkRed>;
                FSeek(startof(this) + name_offset);
                string name<bgcolor=cNone>;
                FSeek(startof(this) + 0x2C);
            }
        } member<name = (exists(this.name) ? this.name : ""), read=Str("Type: %Xh", this.type)>;
    }
} MemberStruct_1<bgcolor=cPurple, read=Str("Members: %d", this.count)>;

typedef struct TTimelineMember{
    OffsetT name_offset;
    FSeek(startof(this) + name_offset);
    
    string name<bgcolor=Sky_500>;
    
    FSeek(startof(this) + 4);
    
    uint flags<format=hex>;
    
    struct{
        int type_maybe;
        DataPointer elements_ptr;
        DataPointer ptr_1;
        DataPointer members_ptr;
        
        FSeek(startof(this) + elements_ptr.offset);
        MemberStruct_0 timeline_elements[elements_ptr.count]<optimize=false>;
        
        FSeek(startof(this) + ptr_1.offset);
        struct{
            int index;
            DataPointer field_0x1;
        } what_even[ptr_1.count]<bgcolor=cGreen>;
        
        FSeek(startof(this) + members_ptr.offset);
        MemberStruct_1 timeline_members(members_ptr);

        FSeek(startof(this) + 0x1C);
        
    } field_0x2; 
    
    int duration;
    int field_0x4;
    int field_0x5;
    OffsetT offset_field_0x6<fgcolor=cRed>;
    OffsetT offset_field_0x7<fgcolor=cRed>;
    int field_0x8;
    OffsetT offset_field_0x9<fgcolor=cRed>;
    Padding padding(32);
    
    FSeek(startof(this) + offset_field_0x7);
    AssetEntry data_0x7;
    FSeek(startof(this) + 0x60);
} TimelineMember<name = this.name>;

typedef struct TMemberData{
    int field_0x0;
    int field_0x1;
    Color color;
    int field_0x3;
    float field_0x4;
    int field_0x05;
    int field_0x06;
    int field_0x07;
    int field_0x08;
    int field_0x09;
    int field_0x0A;
    int field_0x0B;
    int field_0x0C;
    int field_0x0D;
    int field_0x0E;
    int field_0x0F;
} MemberData;

typedef struct TGroup{
    MemberData base;
} Group;

typedef struct TImage{
    MemberData base;
    DataPointer pointer_16;
    
    FSeek(startof(this) + pointer_16.offset);
    
    struct{
        int offset_field<fgcolor=cRed>;
        int field_1;
        int field_2;
        
        FSeek(startof(offset_field) + offset_field);
        // This might actually be stupid
        AssetEntry texture_info;
    
    } offset_struct;  
} Image;

typedef struct TRectangle{
    MemberData base;
} Rectangle;

typedef struct TEllipse{
    MemberData base;
} Ellipse;

typedef struct TBezierNode{
    Point origin;
    Point handle_a;
    Point handle_b;
    float field_0x3;
    Padding padding(0x1C);
    //float unknown_floats[8];
} BezierNode<bgcolor=cDkBlue, read=BezierNodeRead>;

string BezierNodeRead(BezierNode& input)
{
    return Str("Origin: %d, %d", input.origin.x, input.origin.y);
}

typedef struct TBezier{
    MemberData base;
    byte unknown_data_1[64]<bgcolor=cGray>;
    DataPointer nodes_ptr;
    
    FSeek(startof(this) + nodes_ptr.offset);
    BezierNode nodes[nodes_ptr.count];
} Bezier;

typedef struct TGroupRef{
    MemberData base;
} GroupRef;

typedef struct TMask{
    MemberData base;
    DataPointer field_0x1;
    
    FSeek(startof(this) + field_0x1.offset);
    struct(DataPointer& ptr){
        OffsetT offsets[ptr.count];
        local int i <hidden=true>;
        for(i = 0; i < ptr.count; i++)
        {
            FSeek(startof(this) + offsets[i]);
            AssetEntry entry;
        }
    } struct_0x2(field_0x1);
} Mask;

typedef struct TMember{
    MemberType type;
    OffsetT name_offset<bgcolor=cWhite>;
    
    Point origin;
    float rotation;
    Vector2 scale;
    Point anchor_point;
    Padding unknown_data(32);
    Point dimensions;
    int offset_to_data;
    int unknown_0;
    int field_00;
    int field_01;
    int field_02;
    int field_03;
    int field_04;
    int field_05;
    int field_06;
    int offset_field_07<fgcolor=cRed>;
    int offset_field_08<fgcolor=cRed>;
    int field_09;
    int field_10;
    int field_11;
    int field_12;
    int field_13;
    int field_14;
    
    if(type == kGroup)
    {
        DataPointer children_ptr;
        FSeek(startof(this) + children_ptr.offset);
        MemberList children(children_ptr);
        FSeek(startof(children_ptr) + sizeof(children_ptr));
    }
    
    FSeek(startof(this) + offset_to_data);
    switch(type)
    {
        case kGroup:
        {
            Group group_data<bgcolor=cPurple>;
            break;
        }
        case kImage:
        {
            Image image_data<bgcolor=cPurple>;
            break;
        }
        case kEllipse:
        {
            Ellipse ellipse_data<bgcolor=cPurple>;
            break;
        }
        case kBezier:
        {
            Bezier bezier_data<bgcolor=cPurple>;
            break;
        }
        case kRectangle:
        {
            Rectangle rectangle_data<bgcolor=cPurple>;
            break;
        }
        case kGroupRef:
        {
            GroupRef group_ref_data<bgcolor=cPurple>;
            break;
        }
        case kMask:
        {
            Mask mask_data<bgcolor=cPurple>;
            break;
        }
        default:
            break;
    }
    
    if(offset_field_07 > 0)
    {
        FSeek(startof(this) + offset_field_07);
        string pain;
    }
    
    if(offset_field_08 > 0)
    {
        FSeek(startof(this) + offset_field_08);
        AssetEntry test;
    }
    
    FSeek(startof(this) + name_offset);
    string name<bgcolor=cWhite>;
} Member    <name = Str("%s (%dx%d) ", this.name, this.dimensions.x, this.dimensions.y), 
            read=EnumToString(this.type), 
            bgcolor=cDkRed>;

typedef struct TMemberList(DataPointer& ptr){
    local uint count<hidden=true> = ptr.count;
    OffsetT offsets[count];
    local int i<hidden=true>;
    for(i = 0 ; i < ptr.count; i++)
    {
        FSeek(startof(this) + offsets[i]);
        Member member<bgcolor=cLtPurple>;
    }
    
    FSeek(startof(this) + sizeof(ptr));
} MemberList <read=Str("Members: %d", this.count)>;

typedef struct TLayerProperties{
    int type;
    int name_offset_offset<format=hex, fgcolor=cRed>;
    int name_count<fgcolor=cGreen>;
    int unk_subtype;
    BlendMode blend_mode;
    int maybe_flags;
    int unknowns_0[4];
    int field_0x28;
    float field_0x2C;
    float field_0x30;
    float field_0x34;
    float field_0x38;
    float field_0x3C;
    float field_0x40;
    float field_0x44;
    float field_0x48;
    int field_0x4C;
    float field_0x50;
    float field_0x54;
    float field_0x58;
    float field_0x5C;
    short field_0x60;
    byte field_0x62;
    byte field_0x63;
    float field_0x64;
    int field_0x68;
    float field_0x6C;
    float field_0x70;
    float field_0x74;
    float field_0x78;
    float field_0x7C;
    float field_0x80;
    float field_0x84;
    float field_0x88;
    float field_0x8C;
    float field_0x90;
    float field_0x94;
    int offset_0x98 <format=hex, fgcolor=cRed>;
    float field_0x9C;
    float field_0xA0;
    float field_0xA4;
    int name_offset <format=hex, fgcolor=cRed>;
    int name_count <fgcolor=cGreen>;
    int field_0xB0;
    int field_0xB4;
    int field_0xB8;
    float field_0xBC;
    float field_0xC0;
    float field_0xC4;
    float field_0xC8;
    float field_0xCC;
    float field_0xD0;
    float field_0xD4;
    float field_0xD8;
    float field_0xDC;
    float field_0xF0;
    float field_0xF4;
    float field_0xF8;
    float field_0xFC;
    int field_0x100;
    int field_0x104;
    int sub_type_0x108; // Used if type == 1?
    int field_0x10C; // Used if type == 1?
    if (type == 15)
    {
        int field_0x10C;
        int field_0x110;
        float field_0x114;
        float field_0x118;
        float field_0x11C;
        float field_0x120;
        float field_0x124;
        float field_0x128;
        int field_0x12C;
        int field_0x130;
        int field_0x134;
        float field_0x138;
        float field_0x13C;
        float field_0x140;
        float field_0x144;
        float field_0x148;
        float field_0x14C;
        float field_0x150;
        float field_0x154;
        float field_0x158;
        float field_0x15C;
    }
    Padding padding(0x28);
    local int endPos = FTell();
        
    struct
    {
        FSeek(startof(type) + name_offset_offset);
        int str_offset[name_count];
    
        FSeek(startof(str_offset) + str_offset[0]);
        string str;
        
        FSeek(startof(str_offset) + (name_count * 4));
    } names <bgcolor=cGray>;
    
    FSeek(startof(type) + offset_0x98);
    AssetEntry struct_0x98;
    
    if(name_count > 0)
    {
        struct{
            FSeek(startof(type) + name_offset);
            int offset_0<fgcolor=cRed>;
            int field_1;
            int field_2;
            
            FSeek(startof(offset_0) + offset_0);
            AssetEntry test;
        } more_weird;
    }
    
    
    FSeek(endPos);
} LayerProperties <bgcolor=cRed>;

typedef struct TGroupEntry{
    uint name_offset <format=hex, fgcolor=cRed>;
    Point dimensions;
    uint layer_properties_offset <format=hex, fgcolor=cRed>;
    DataPointer member_ptr;
    DataPointer timeline_ptr;
    Padding padding(0x20);
    
    FSeek(startof(this) + layer_properties_offset);
    LayerProperties layer_properties;
    
    FSeek(startof(this) + member_ptr.offset);
    MemberList members(member_ptr);
    
    FSeek(startof(this) + timeline_ptr.offset);
    TimelineMember timeline_collection[timeline_ptr.count]<optimize=false>;
    
    FSeek(startof(this) + name_offset);
    string name<bgcolor=cPurple>;
    
    FSeek(startof(name_offset) + 0x40);
} GroupEntry <name = Str("%s (%dx%d) ", this.name, this.dimensions.x, this.dimensions.y),
                read=GroupRead>;
                
string GroupRead(GroupEntry& input)
{
    local int count = input.member_ptr.count;
    local string blend_mode = EnumToString(input.layer_properties.blend_mode);
    return Str("Members: %d, Blend Mode: %s", count, blend_mode);
}

typedef struct TAssetEntry{
    enum {
        kInvalid,
        kTexture,
        kUi,
        kVfx,
    } type_maybe;
    
    OffsetT texture_path_offset;
    OffsetT name_info_offset;
    int pad[8] <hidden=true, bgcolor=cNone>;
    
    FSeek(startof(this) + texture_path_offset);
    string str_data<bgcolor=Amber_700>;
    
    FSeek(startof(this) + name_info_offset);
    struct
    {
        int unknown <format=hex>;
        int part_path_offset <format=hex, fgcolor=cRed>;
        
        FSeek(startof(this) + part_path_offset);
        string str_data<bgcolor=Amber_400>;
        
        FSeek(startof(this) + 0x08);
    } name_info <read=this.str_data, bgcolor=cLtBlue>;

    FSeek(startof(this) + 0x2C);
} AssetEntry;

typedef struct(DataPointer& ptr){
    local int count<hidden=true> = ptr.count;
    OffsetT offsets[ptr.count];
    local int i<hidden=true>;
    for(i = 0; i < ptr.count; i++)
    {
        FSeek(startof(this) + offsets[i]);
        AssetEntry data_entry;
    }
} DataList<read = Str("Length: %d", this.count)>;

typedef struct TAssetCollection{
    DataPointer textures_ptr;
    DataPointer ui_ptr;
    DataPointer vfx_ptr;
    Padding padding(0x1C);
    
    FSeek(startof(this) + textures_ptr.offset);
    DataList texture_list(textures_ptr)<bgcolor=cDkYellow>;

    FSeek(startof(this) + ui_ptr.offset);
    DataList ui_list(ui_ptr)<bgcolor=cLtGreen>;

    FSeek(startof(this) + vfx_ptr.offset);
    DataList vfx_list(vfx_ptr)<bgcolor=cLtBlue>;
    
    FSeek(startof(this) + 0x34);
} AssetCollection;

typedef struct TUIBHeader{
    uint magic<format=hex, comment="'UIB\\0', checked">;
    uint version<comment="FF16: Version 10 expected">;
    byte reserved[16];
    uint headerSize <format=hex>;
    byte _empty_[16];
} UIBHeader<bgcolor=cPurple>;

UIBHeader header;
FSeek(startof(header) + header.headerSize);

struct{
    OffsetT array_list_offset;
    DataPointer group_list_ptr;
} toc <bgcolor=cRed, size=0x2C>;

FSeek(startof(toc) + toc.array_list_offset);

AssetCollection assets <bgcolor=cYellow>;

FSeek(startof(toc) + toc.group_list_ptr.offset);
local int i<hidden=true> = 0;

struct
{
    local int count<hidden=true> = toc.group_list_ptr.count;
    for (i = 0; i < count; i++)
    {
        FSeek(startof(toc) + toc.group_list_ptr.offset + (i * 0x40));
        GroupEntry layer <bgcolor=cBlue>;
    }
} layers <read=Str("Layers: %d", this.count)>;