//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Final Fantasy XVI VFX Binary
//   Authors: My new headphones came in let's go 
//   Version: idk how versioning works
//   Purpose: 
//  Category: 
// File Mask: *.vfxb
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef int OffsetT<fgcolor=cRed, format=hex>;
typedef int AddressT<fgcolor=cPurple, format=hex>;

typedef struct TPadding(uint64 count){
    local uint64 padding_count<hidden=true> = count;
    byte data[padding_count];
} Padding<bgcolor=cNone, read=Str("%u bytes", this.padding_count)>;

typedef struct TOffset24{
    int offset : 24;
    int flags : 8;
} Offset24<fgcolor=0x008CFF, read=Str("%Xh, %s", this.offset, IntToBinaryStr(this.flags))>;

typedef struct TVarOffset(ubyte offsetSize, ubyte flagSize)
{
    local ubyte offset_size = offsetSize;
    local ubyte flag_size = flagSize;
    
    int offset : offset_size;
    int flags : flag_size;
} VarOffset<fgcolor=0x008CFF, read=Str("%Xh, %s", this.offset, IntToBinaryStr(this.flags))>;


typedef struct TItemEntry{
    OffsetT offset;
    VarOffset field_0x1(30, 2);
    VarOffset field_0x2(30, 2);
    int field_0x3;
} ItemEntry;

typedef struct TStringT{
    string data;
} StringT<read=this.data>;

typedef struct TVector3{
    float x, y, z;
} Vector3<read=Str("%.3f, %.3f, %.3f", this.x, this.y, this.z)>;

typedef struct TVector4{
    float x, y, z, w;
} Vector4<read=Str("%.3f, %.3f, %.3f, %.3f", this.x, this.y, this.z, this.w)>;

struct Header{
    char magic[4]<fgcolor=cYellow>;
    
    byte field_0x1;
    byte field_0x2;
    byte field_0x3;
    Padding padding(1);
    
    int property_data_size; // property data size?
    int item_data_size; // item data size
    int total_data_size; // item + property data size
    int field_0x7;
    int vertex_set_count<fgcolor=cGreen>; // selected vertex set count
    
    byte texture_count<fgcolor=cGreen>; // texture count
    byte field_0xA<fgcolor=cGreen>; // constant count
    byte field_0xB;
    byte field_0xC<fgcolor=cGreen>; // struct_0x2 count
    
    byte string_count<fgcolor=cGreen>; // string count
    byte field_0xE;
    byte field_0xF;
    byte field_0x10;
    
    byte field_0x11;
    byte field_0x12;
    byte field_0x13;
    byte field_0x14;
    
    byte field_0x15;
    byte field_0x16;
    byte field_0x17;
    byte field_0x18;
    
    Padding padding_1(4);
};

Header header<bgcolor=cDkGreen>;
ItemEntry root_items[15];
byte unknown_data[0x98]<bgcolor=cGray>;

struct{
    AddressT address;
    uint size;
} shader_blob_ptr<read=Str("%Xh, %d bytes", this.address, this.size)>;

struct{
    AddressT address;
    int field_0x1;
    int field_0x2;
} string_blob_ptr<read=Str("%Xh", this.address)>;

struct{
    AddressT address;
    int field_0x1;
} blob_0x2_ptr<read=Str("%Xh", this.address)>;

struct{
    AddressT address;
    OffsetT properties_offset; // USED
    OffsetT items_offset; // USED
    OffsetT field_0x3; // USED
    OffsetT field_0x4;
    OffsetT field_0x5; // USED
    OffsetT field_0x6;
    OffsetT field_0x7;
    OffsetT field_0x8; // USED
    OffsetT field_0x9; // USED
    OffsetT field_0xA; // USED
    OffsetT field_0xB;
    OffsetT field_0xC; // USED
    OffsetT field_0xD;
    OffsetT field_0xE; // USED
    
    local AddressT properties_address = address + properties_offset;
    local AddressT items_address = address + items_offset;
    local AddressT constants_address = address + field_0x3;
    local AddressT constant_data_address = address + field_0x5;
    local AddressT vertex_set_address = address + field_0x8;
    local AddressT texture_indices_address = address + field_0x9;
    local AddressT project_info_address = address + field_0xA;
    local AddressT texture_groups_address = address + field_0xE;
} item_blob_ptr<open=true>;

FSeek(shader_blob_ptr.address);
ubyte shader_blob[shader_blob_ptr.size]<bgcolor=cBlack, fgcolor=cGray>;

FSeek(string_blob_ptr.address);
StringT strings[header.string_count]<fgcolor=cYellow, optimize=false>;

FSeek(blob_0x2_ptr.address);
struct{
    local int count = header.field_0xC;
    struct{
        byte field_0x0;
        byte field_0x1;
        byte field_0x2;
        byte field_0x3;
        byte field_0x4;
        byte field_0x5;
        byte field_0x6;
        byte field_0x7;
        OffsetT offset;
    } entries[count];
    local int i;
    for(i = 0; i < count; i++){
        FSeek(startof(this) + entries[i].offset);
        int sanity_check;
    }
} struct_0x2<bgcolor=cLtBlue, read=Str("count: %d", this.count)>;

FSeek(item_blob_ptr.vertex_set_address);
struct{
    local int count = header.vertex_set_count;
    short name_offsets[count]<fgcolor=cRed>;
    
    local int i<hidden=true>;
    for(i = 0; i < count; i++)
    {
        FSeek(startof(this) + sizeof(name_offsets) + name_offsets[i]);
        StringT set<fgcolor=cYellow>;
    }
} vertex_sets<read=Str("count: %d", this.count), bgcolor=0xC9A91C>;

FSeek(item_blob_ptr.project_info_address);
struct{
    int field_0x0;
    int field_0x1;
    int item_count<fgcolor=cGreen>;
    Padding padding(32);
    int field_0x3;
    int field_0x4;
    Padding padding_1(20);
    
} project_info<bgcolor=cDkGreen>;

FSeek(item_blob_ptr.texture_indices_address);
int64 texture_string_indices[header.texture_count]<bgcolor=cRed>;


enum<byte> ConstantDataType{

    kVector4 = 0x1,
    kFloat32 = 0x3,
};

typedef struct TConstantEntry{
    ConstantDataType type;
    byte name_length;
    byte name_offset<fgcolor=cRed>;
    byte field_0x3;
    OffsetT field_0x4;
    OffsetT field_0x5;
    OffsetT field_0x6;
    
    FSeek(strings_address + name_offset);
    string name<fgcolor=cYellow>;
    
    FSeek(item_blob_ptr.constant_data_address + field_0x6);
    switch(type)
    {
        case kFloat32: float value; break;
        case kVector4: Vector4 value; break;
        default: int temp; break;
    }
    
    FSeek(startof(this) + 0x10);
} ConstantEntry<read=Str("%s %s", EnumToString(this.type), this.name)>;

FSeek(item_blob_ptr.constants_address);
if(header.field_0xA)
    struct{
        local int count = header.field_0xA;
        local AddressT byte_field_address = FTell() + (count * 0x10);
        local AddressT strings_address = byte_field_address + 0x10;
        local int i<hidden=true>;
        for(i = 0; i < count; i++)
        {
            ConstantEntry entry;
        }
        
        byte byte_field[16];
    }constants<read=Str("count: %d", this.count), bgcolor=cBlue>;

struct Item;
typedef struct TTextureGroup{
    byte indices[8];
    local int count = 0;
    local int i<hidden=true>;
    local int64 string_index<hidden=true> = -1;
    for(i = 0; i < 8; i++)
    {
        if(indices[i] == -1)
            continue;
            
        count += 1;
        string_index = texture_string_indices[indices[i]];
        local StringT texture;
        if(string_index > 255)
            continue;
        texture.data = strings[string_index].data;
        
    }
} TextureGroup;

enum KeyType{
    k0 = 0x0,
    k1 = 0x1,
    k2 = 0x2,
    kVector3 = 0x3
};

typedef struct TKey2{
    Vector4 v1;
    Vector3 v2;
} Key2;

typedef struct TKey{
    KeyType type<bgcolor=0xFF0063>;
    float time;
    switch(type)
    {
        case k0: float value; break;
        case k1: float value; break;
        case k2: Key2 value; break;
        case kVector3: Vector3 value; break;
        default: break;
    }
} Key<read=Str("%s", EnumToString(this.type))>;

typedef struct TKeyList{
    int count<fgcolor=cGreen>;
    local int i<hidden=true>;
    for(i = 0; i < count; i++)
    {
        Key key;
    }
} KeyList<read=Str("keys: %d", this.count)>;

enum <short> PropertyType{
    k1E = 0x1E,
    kItem = 0x2B,
    k31 = 0x31,
    k8A = 0x8A,
    k8B = 0x8B,
    k8C = 0x8C,
    k8E = 0x8E,
    k8F = 0x8F,
    k91 = 0x91,
    kA5 = 0xA5,
};

void GenerateProperty_0xA5(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    Offset24 field_0x3;
    int field_0x4;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    Offset24 field_0x5<bgcolor=cYellow>;
    FSeek(startof(this) + size);
}

void GenerateProperty_0x91(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    VarOffset field_0x3(30, 2);
    int field_0x4;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    OffsetT field_0x5<bgcolor=cYellow>;
    
    FSeek(item_blob_ptr.properties_address + field_0x5);
    KeyList keys<bgcolor=cDkBlue>;
    
    FSeek(startof(this) + size);
}

void GenerateProperty_0x8C(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    Offset24 field_0x3;
    int field_0x4;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    Offset24 field_0x5<bgcolor=cYellow>;
    FSeek(startof(this) + size);
}

void GenerateProperty_0x8B(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    VarOffset field_0x3(30, 2);
    int field_0x4;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    float field_0x5<bgcolor=cYellow>;
    
    FSeek(parentof(this).address_0x0 + field_0x3.offset);
    float field_0x6<bgcolor=cDkYellow>;
    
    FSeek(startof(this) + size);
}

void GenerateProperty_0x8A(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    OffsetT field_0x3;
    int field_0x4;
    int field_0x5;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    float field_0x6<bgcolor=cYellow>;
    
    FSeek(item_blob_ptr.properties_address + field_0x3);
    float field_0x7<bgcolor=cYellow>;
    
    
    FSeek(startof(this) + size);
}

void GenerateProperty_0x8E(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    Offset24 field_0x3;
    int field_0x4;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    Offset24 field_0x5;
    
    FSeek(startof(this) + size);
}

void GenerateProperty_0x8F(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    OffsetT field_0x2;
    Offset24 field_0x3;
    int field_0x4;
    
    FSeek(item_blob_ptr.properties_address + field_0x2);
    OffsetT field_0x5;
    
    FSeek(item_blob_ptr.properties_address + field_0x5);
    KeyList keys<bgcolor=cDkBlue>;
    
    FSeek(startof(this) + size);
}

void GenerateProperty_0x31()
{
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    int field_0x2, field_0x3, field_0x4, field_0x5;
    int field_0x6, field_0x7, field_0x8, field_0x9;
    short field_0xA;
    short offset;
    int field_0xC;
    int field_0xD;
    int field_0xE;
    int field_0xF;
    int field_0x10;
    int field_0x11;
    int field_0x12;
    int field_0x13;
    int field_0x14;
    int field_0x15;
    int field_0x16;
    int field_0x17;
    int field_0x18;
    int field_0x19;
    int field_0x1A;
    
    FSeek(item_blob_ptr.texture_groups_address + offset);
    TextureGroup texture_group<bgcolor=cDkRed>;
    
    FSeek(startof(this) + size);
}

void GenerateItemProperty(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    int count<fgcolor=cGreen>;
    VarOffset field_0x3(30, 2);
    short field_0x4 : 6;
    short field_0x4a : 10;
    short field_0x5;
    Offset24 field_0x6, field_0x7;
    OffsetT field_0x8, field_0x9;
    
    FSeek(parentof(this).address_0x0 + field_0x3.offset);
    struct{
        OffsetT offset;
        float field_0x1;
        Offset24 field_0x2;
        Offset24 field_0x3;
    } item_info[count]<bgcolor=0x92006D>;
    
    local int i<hidden=true>;
    for(i = 0; i < count; i++)
    {
        FSeek(item_blob_ptr.items_address + item_info[i].offset);
        Item item<bgcolor=0x92006D>;
    }
     
    if(field_0x8 > -1)
    {
        FSeek(item_blob_ptr.properties_address + field_0x8);
        OffsetT field_0xA<bgcolor=0x92006D>;
        FSeek(item_blob_ptr.properties_address + field_0xA);
        float field_0xB<bgcolor=0x92006D>;
    }
    
    if(field_0x9 > -1)
    {
        FSeek(item_blob_ptr.properties_address + field_0x9);
        OffsetT field_0xC<bgcolor=0x92006D>;
        FSeek(item_blob_ptr.properties_address + field_0xC);
        float field_0xD<bgcolor=0x92006D>;
    }
    
    
    FSeek(startof(this) + size);
}

void GenerateProperty_0x1E(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    VarOffset field_0x2(30, 2);
    int field_0x3;
    float field_0x4;
    
    FSeek(parentof(this).address_0x0 + field_0x2.offset);
    float field_0x5<bgcolor=cWhite>;
    FSeek(startof(this) + size);
}

void GeneratePropertyGeneric(){
    PropertyType type<bgcolor=cGreen>;
    short size<bgcolor=cBlue>;
    byte data[size - 4];
}

typedef struct TItemProperty{
    switch(ReadShort())
    {
        case k1E: GenerateProperty_0x1E(); break;
        case kItem: GenerateItemProperty(); break;
        case k31: GenerateProperty_0x31(); break;
        case k8A: GenerateProperty_0x8A(); break;
        case k8B: GenerateProperty_0x8B(); break;
        case k8C: GenerateProperty_0x8C(); break;
        case k8E: GenerateProperty_0x8E(); break;
        case k8F: GenerateProperty_0x8F(); break;
        case k91: GenerateProperty_0x91(); break;
        case kA5: GenerateProperty_0xA5(); break;
        default: GeneratePropertyGeneric(); break;  
    }
} ItemProperty<read=Str("%s (%Xh)", EnumToString(this.type), this.type)>;

typedef struct TItem{
    OffsetT field_0x0;
    OffsetT field_0x1;
    int property_size : 24;
    int property_offset : 8;
    float field_0x4;
    float field_0x5;
    float field_0x6;
    OffsetT field_0x7;
    Offset24 field_0x8;
    Offset24 field_0x9;
    OffsetT field_0xA;
    int field_0xB;
    int field_0xC;
    int field_0xD;
    int field_0xE;
    
    int child_count<fgcolor=cGreen>;
    Offset24 field_0x10;
    OffsetT field_0x11;
    Offset24 field_0x12;
    int field_0x13;
    
    Offset24 field_0x15;
    int field_0x16, field_0x17, field_0x18;
    
    int field_0x19, field_0x1A, field_0x1B, field_0x1C;
    
    int field_0x1D;
    uint hash;
    int field_0x1F;
    int field_0x20;
    
    local int64 address_0x0 = item_blob_ptr.properties_address + field_0x0;
    FSeek(address_0x0);
    float test<bgcolor=cRed>;
    
    FSeek(item_blob_ptr.properties_address + field_0x1);
    float test_0x1;
    
    if(field_0x11 > -1)
    {
        FSeek(item_blob_ptr.properties_address + field_0x11);
        float sanity<bgcolor=cGreen>;
    }
    
    FSeek(startof(this) + 0x7C);
    
    local int64 end_point = FTell() + property_size;
    FSkip(property_offset);
    while(FTell() < end_point)
    {
        ItemProperty property<bgcolor=cNone>;
    }
}Item<read=Str("children: %d", this.child_count)>;

local int i<hidden=true>;
for(i = 0; i < 15; i++)
{
    if(root_items[i].offset == 1)
        continue;
    
    FSeek(item_blob_ptr.items_address + root_items[i].offset);
    Item item<bgcolor=0xFF00BF>;
}